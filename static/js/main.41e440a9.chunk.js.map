{"version":3,"sources":["Tetris.js","App.js","serviceWorker.js","index.js"],"names":["Tetris","canvas","document","getElementById","context","getContext","collide","arena","player","_ref","matrix","pos","m","o","y","length","x","drawMatrix","offset","forEach","row","value","fillStyle","colors","fillRect","playerDrop","merge","playerReset","rowCount","outer","splice","fill","unshift","score","arenaSweep","updateScore","dropCounter","playerMove","dir","type","Math","random","rotate","_ref2","reverse","scale","dropInterVal","lastTime","innerText","w","h","push","Array","createMatrix","addEventListener","event","keyCode","playerRotate","update","time","arguments","undefined","deltaTime","width","height","requestAnimationFrame","react_default","a","createElement","className","id","React","Component","App","href","Tetris_Tetris","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.41e440a9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './tetris.css'\r\n\r\nexport default class Tetris extends React.Component {\r\n\r\n    componentDidMount() {\r\n        const canvas = document.getElementById('tetris');\r\n        const context = canvas.getContext('2d');\r\n\r\n        context.scale(20, 20)\r\n\r\n        function arenaSweep() {\r\n            let rowCount = 1;\r\n            outer: for (let y = arena.length - 1; y > 0; --y) {\r\n                for (let x = 0; x < arena[y].length; ++x) {\r\n                    if (arena[y][x] === 0) {\r\n                        continue outer;\r\n                    }\r\n                }\r\n\r\n                const row = arena.splice(y, 1)[0].fill(0);\r\n                arena.unshift(row);\r\n                ++y;\r\n\r\n                player.score += rowCount * 10;\r\n                rowCount *= 2;\r\n            }\r\n        }\r\n\r\n        function collide(arena, player) {\r\n            const [m, o] = [player.matrix, player.pos];\r\n            for (let y = 0; y < m.length; ++y) {\r\n                for (let x = 0; x < m[y].length; ++x) {\r\n                    if (m[y][x] !== 0 &&\r\n                        (arena[y + o.y] &&\r\n                            arena[y + o.y][x + o.x]) !== 0) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function createMatrix(w, h) {\r\n            const matrix = [];\r\n            while (h--) {\r\n                matrix.push(new Array(w).fill(0));\r\n            }\r\n            return matrix;\r\n        }\r\n\r\n        function createPiece(type) {\r\n            if (type === 'T') {\r\n                return [\r\n                    [0, 0, 0],\r\n                    [1, 1, 1],\r\n                    [0, 1, 0],\r\n                ];\r\n            } else if (type === 'O') {\r\n                return [\r\n                    [2, 2],\r\n                    [2, 2],\r\n                ];\r\n            } else if (type === 'L') {\r\n                return [\r\n                    [0, 3, 0],\r\n                    [0, 3, 0],\r\n                    [0, 3, 3],\r\n                ];\r\n            } else if (type === 'J') {\r\n                return [\r\n                    [0, 4, 0],\r\n                    [0, 4, 0],\r\n                    [4, 4, 0],\r\n                ];\r\n            } else if (type === 'I') {\r\n                return [\r\n                    [0, 5, 0, 0],\r\n                    [0, 5, 0, 0],\r\n                    [0, 5, 0, 0],\r\n                    [0, 5, 0, 0],\r\n                ];\r\n            } else if (type === 'S') {\r\n                return [\r\n                    [0, 6, 6],\r\n                    [6, 6, 0],\r\n                    [0, 0, 0],\r\n                ];\r\n            } else if (type === 'Z') {\r\n                return [\r\n                    [7, 7, 0],\r\n                    [0, 7, 7],\r\n                    [0, 0, 0],\r\n                ];\r\n            }\r\n        }\r\n\r\n        function draw() {\r\n            context.fillStyle = '#000';\r\n            context.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            drawMatrix(arena, { x: 0, y: 0 });\r\n            drawMatrix(player.matrix, player.pos);\r\n        }\r\n\r\n        function drawMatrix(matrix, offset) {\r\n            matrix.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if (value !== 0) {\r\n                        context.fillStyle = colors[value];\r\n                        context.fillRect(x + offset.x,\r\n                            y + offset.y,\r\n                            1, 1);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        function merge(arena, player) {\r\n            player.matrix.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if (value !== 0) {\r\n                        arena[y + player.pos.y][x + player.pos.x] = value;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        function playerDrop() {\r\n            player.pos.y++;\r\n            if (collide(arena, player)) {\r\n                player.pos.y--;\r\n                merge(arena, player);\r\n                playerReset();\r\n                arenaSweep();\r\n                updateScore();\r\n            }\r\n            dropCounter = 0;\r\n        }\r\n\r\n        function playerMove(dir) {\r\n            player.pos.x += dir;\r\n            if (collide(arena, player)) {\r\n                player.pos.x -= dir;\r\n            }\r\n        }\r\n\r\n        function playerReset() {\r\n            const pieces = 'ILJOTSZ';\r\n            player.matrix = createPiece(pieces[pieces.length * Math.random() | 0]);\r\n            player.pos.y = 0;\r\n            player.pos.x = (arena[0].length / 2 | 0) -\r\n                (player.matrix[0].length / 2 | 0);\r\n            if (collide(arena, player)) {\r\n                arena.forEach(row => row.fill(0));\r\n                player.score = 0;\r\n                updateScore();\r\n            }\r\n        }\r\n\r\n        function playerRotate(dir) {\r\n            const pos = player.pos.x;\r\n            let offset = 1;\r\n            rotate(player.matrix, dir);\r\n            while (collide(arena, player)) {\r\n                player.pos.x += offset;\r\n                offset = -(offset + (offset > 0 ? 1 : -1));\r\n                if (offset > player.matrix[0].length) {\r\n                    rotate(player.matrix, -dir);\r\n                    player.pos.x = pos;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        function rotate(matrix, dir) {\r\n            for (let y = 0; y < matrix.length; ++y) {\r\n                for (let x = 0; x < y; ++x) {\r\n                    [\r\n                        matrix[x][y],\r\n                        matrix[y][x],\r\n                    ] = [\r\n                            matrix[y][x],\r\n                            matrix[x][y],\r\n                        ];\r\n                }\r\n            }\r\n\r\n            if (dir > 0) {\r\n                matrix.forEach(row => row.reverse());\r\n            } else {\r\n                matrix.reverse();\r\n            }\r\n        }\r\n\r\n        let dropCounter = 0;\r\n        let dropInterVal = 1000;\r\n\r\n        let lastTime = 0;\r\n        function update(time = 0) {\r\n            const deltaTime = time - lastTime;\r\n            lastTime = time;\r\n\r\n            dropCounter += deltaTime;\r\n            if (dropCounter > dropInterVal) {\r\n                playerDrop();\r\n            }\r\n            draw();\r\n            requestAnimationFrame(update);\r\n        }\r\n\r\n        function updateScore() {\r\n            document.getElementById('score').innerText = player.score;\r\n\r\n        }\r\n        const colors = [\r\n            null,\r\n            '#FF0D72',\r\n            '#0DC2FF',\r\n            '#0DFF72',\r\n            '#F538FF',\r\n            '#FF8E0D',\r\n            '#FFE138',\r\n            '#3877FF']\r\n\r\n        const arena = createMatrix(12, 20);\r\n\r\n\r\n        const player = {\r\n            pos: { x: 0, y: 0 },\r\n            matrix: null,\r\n            score: 0,\r\n        }\r\n\r\n        document.addEventListener('keydown', event => {\r\n            if (event.keyCode === 65) {\r\n                playerMove(-1);\r\n            } else if (event.keyCode === 68) {\r\n                playerMove(1);\r\n            } else if (event.keyCode === 83) {\r\n                playerDrop(); \r\n            } else if (event.keyCode === 87) {\r\n                playerRotate(- 1);\r\n            }\r\n        });\r\n\r\n        playerReset();\r\n        updateScore();\r\n        update();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <div>\r\n                    <h1><i>Score:</i></h1>\r\n                    <div id=\"score\">\r\n                    </div>\r\n                </div>\r\n                <p>\r\n                    <canvas id=\"tetris\" width=\"240\" height=\"400\"></canvas>\r\n                </p>\r\n                <p>\r\n                    <h1><i>Controls:</i>\r\n                        <p>W =rotate</p>\r\n                        <p>A =left</p>\r\n                        <p>S =move down</p>\r\n                        <p>D =right</p>\r\n                    </h1>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Tetris from './Tetris'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    {/*nav bar */}\n      <div className=\"navBar\">\n        <a href=\"#home\" id=\"home\"><h1>Home</h1></a>\n        <a href=\"#gallery\" id=\"gallery\"><h1>Gallery</h1></a>\n        <a href=\"#contact\" id=\"contact\"><h1>Contact</h1></a>\n      </div>\n      <div className=\"footer\">\n        <h1>Welcome to my profile</h1>\n      </div>\n      <h1>My name Ewan Thomas</h1>\n        <div className=\"Emptyspace\">\n          <h2>this is an unfinished pratice example</h2>\n        </div>\n        {/*cat animation*/}\n      <div>\n        <div className=\"catAnim\"/> \n      </div>\n      {/* link to other urls */}\n      <div className=\"home\">\n        <h3>some home tab text</h3>\n      </div>\n      <div className=\"gallery\">\n        <h3>some gallery tab text</h3>\n      </div>\n      <div className=\"contact\"> \n        <h3>some contact tab text</h3>\n      </div>\n      <Tetris></Tetris> \n    </div>\n\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}